/**
 * @fileoverview Firestore Security Rules for CyberMind application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model. Each user has exclusive
 * access to their own data stored under their unique user ID.
 *
 * Data Structure:
 * All user data is nested under `/users/{userId}`.
 *
 * Key Security Decisions:
 * - User listing is disallowed.
 * - All write operations require a verified, signed-in user.
 * - Data validation is relaxed for rapid prototyping but includes
 *   critical checks for authorization and relational integrity.
 *
 * Denormalization for Authorization:
 *   - The `/users/{userId}` path implicitly ties a document to a specific user.
 *     The rules validate that the `id` field within the `/users/{userId}` document
 *     matches the `userId` path parameter to enforce this ownership.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secures the /users/{userId} collection, ensuring only the authenticated user can read or write their own data.
     * @path /users/{userId}
     * @allow (create) - User with UID 'user123' can create a document at /users/user123 if the document's 'id' field also contains 'user123'.
     * @allow (get, update, delete) - User with UID 'user123' can read, update, or delete the document at /users/user123.
     * @deny (create) - User with UID 'user456' cannot create a document at /users/user123.
     * @deny (get, update, delete) - User with UID 'user456' cannot read, update, or delete the document at /users/user123.
     * @principle Enforces document ownership for all operations, including creation, reads, updates, and deletes.
     */
    match /users/{userId} {
      // Helper function to check if the user is signed in
      function isSignedIn() {
        return request.auth != null;
      }

      // Helper function to check if the authenticated user is the owner of the document
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      // Helper function to check if the authenticated user is the owner of the *existing* document
      function isExistingOwner(userId) {
        return isSignedIn() && isOwner(userId) && resource != null;
      }

      // Allow read access only to the owner
      allow get: if isOwner(userId);
      allow list: if false;

      // Allow creation only if the user is signed in and the userId matches the document's id field
      allow create: if isSignedIn() && request.resource.data.id == userId;

      // Allow update and delete only if the user is the owner of the document and the document exists
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }
  }
}