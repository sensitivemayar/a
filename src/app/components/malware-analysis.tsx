"use client";

import { useState } from "react";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import { z } from "zod";
import {
  analyzeMalwareBehavior,
  AnalyzeMalwareBehaviorOutput,
} from "@/ai/flows/analyze-malware-behavior";
import { Button } from "@/components/ui/button";
import {
  Form,
  FormControl,
  FormDescription,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { useToast } from "@/hooks/use-toast";
import { Loader2, AlertTriangle, Terminal } from "lucide-react";

const MAX_FILE_SIZE = 5 * 1024 * 1024; // 5 MB
const ACCEPTED_FILE_TYPES = [
  "text/plain",
  "application/javascript",
  "text/html",
  "application/x-sh",
  "application/vnd.microsoft.portable-executable",
];

const formSchema = z.object({
  payload: z
    .any()
    .refine((files) => files?.length == 1, "File is required.")
    .refine(
      (files) => files?.[0]?.size <= MAX_FILE_SIZE,
      `Max file size is 5MB.`
    ),
  description: z
    .string()
    .min(10, "Description must be at least 10 characters."),
});

export default function MalwareAnalysis() {
  const [result, setResult] = useState<AnalyzeMalwareBehaviorOutput | null>(
    null
  );
  const [isLoading, setIsLoading] = useState(false);
  const { toast } = useToast();

  const form = useForm<z.infer<typeof formSchema>>({
    resolver: zodResolver(formSchema),
    defaultValues: {
      description: "",
    },
  });

  const fileRef = form.register("payload");

  const toDataUri = (file: File): Promise<string> => {
    return new Promise((resolve, reject) => {
      const reader = new FileReader();
      reader.onload = (event) => {
        resolve(event.target?.result as string);
      };
      reader.onerror = (error) => {
        reject(error);
      };
      reader.readAsDataURL(file);
    });
  };

  async function onSubmit(values: z.infer<typeof formSchema>) {
    setIsLoading(true);
    setResult(null);
    try {
      const file = values.payload[0];
      const payloadDataUri = await toDataUri(file);

      const analysis = await analyzeMalwareBehavior({
        payloadDataUri,
        description: values.description,
      });

      setResult(analysis);
      toast({
        title: "Analysis Complete",
        description: "The payload has been analyzed.",
        variant: "destructive",
      });
    } catch (error) {
      console.error("Malware analysis error:", error);
      toast({
        title: "Analysis Failed",
        description: "Could not analyze the payload. Please try again.",
        variant: "destructive",
      });
    } finally {
      setIsLoading(false);
    }
  }

  return (
    <div className="space-y-6">
      <header>
        <h1 className="text-3xl font-bold tracking-tight">Malware Analysis</h1>
        <p className="text-muted-foreground">
          Analyze potential malicious payloads using dynamic analysis.
        </p>
      </header>

      <Card>
        <CardHeader>
          <CardTitle>Payload Analyzer</CardTitle>
          <CardDescription>
            Upload a file and provide a description for analysis.
          </CardDescription>
        </CardHeader>
        <CardContent>
          <Form {...form}>
            <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-4">
              <FormField
                control={form.control}
                name="payload"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Payload File</FormLabel>
                    <FormControl>
                      <Input type="file" {...fileRef} />
                    </FormControl>
                    <FormDescription>
                      Upload a potentially malicious file for analysis (max 5MB).
                    </FormDescription>
                    <FormMessage />
                  </FormItem>
                )}
              />
              <FormField
                control={form.control}
                name="description"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Description</FormLabel>
                    <FormControl>
                      <Input
                        placeholder="e.g., 'Suspicious script from email attachment'"
                        {...field}
                      />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
              <Button type="submit" disabled={isLoading}>
                {isLoading && (
                  <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                )}
                Analyze Payload
              </Button>
            </form>
          </Form>
        </CardContent>
      </Card>

      {result && (
        <Card className="border-destructive">
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <AlertTriangle className="h-6 w-6 text-destructive" />
              Analysis Result
            </CardTitle>
            <CardDescription>
              The payload exhibits potentially malicious behavior.
            </CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            <div>
              <h3 className="font-semibold flex items-center gap-2">
                <Terminal className="h-4 w-4" />
                Behavior Summary
              </h3>
              <p className="text-sm text-muted-foreground whitespace-pre-wrap font-mono p-4 bg-muted rounded-md mt-2">
                {result.summary}
              </p>
            </div>
            <div>
              <h3 className="font-semibold flex items-center gap-2">
                <AlertTriangle className="h-4 w-4" />
                Potential Impact
              </h3>
              <p className="text-sm text-muted-foreground whitespace-pre-wrap font-mono p-4 bg-muted rounded-md mt-2">
                {result.potentialImpact}
              </p>
            </div>
          </CardContent>
        </Card>
      )}
    </div>
  );
}
